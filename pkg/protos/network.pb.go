// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: network.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Artifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Artifacts) Reset() {
	*x = Artifacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifacts) ProtoMessage() {}

func (x *Artifacts) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifacts.ProtoReflect.Descriptor instead.
func (*Artifacts) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

func (x *Artifacts) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ResponseNodes) Reset() {
	*x = ResponseNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseNodes) ProtoMessage() {}

func (x *ResponseNodes) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseNodes.ProtoReflect.Descriptor instead.
func (*ResponseNodes) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseNodes) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type RequestRegister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chain *Chain `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	User  string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Pwd   string `protobuf:"bytes,3,opt,name=pwd,proto3" json:"pwd,omitempty"`
}

func (x *RequestRegister) Reset() {
	*x = RequestRegister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegister) ProtoMessage() {}

func (x *RequestRegister) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegister.ProtoReflect.Descriptor instead.
func (*RequestRegister) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2}
}

func (x *RequestRegister) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *RequestRegister) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *RequestRegister) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

type ResponseUri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *ResponseUri) Reset() {
	*x = ResponseUri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseUri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseUri) ProtoMessage() {}

func (x *ResponseUri) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseUri.ProtoReflect.Descriptor instead.
func (*ResponseUri) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseUri) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type RequestSetupContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel  *Channel  `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Contract *Contract `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *RequestSetupContract) Reset() {
	*x = RequestSetupContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSetupContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSetupContract) ProtoMessage() {}

func (x *RequestSetupContract) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSetupContract.ProtoReflect.Descriptor instead.
func (*RequestSetupContract) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{4}
}

func (x *RequestSetupContract) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *RequestSetupContract) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

type RequestQueryOrInvokeContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数字身份
	Identity *DigitalIdentity `protobuf:"bytes,2,opt,name=Identity,proto3" json:"Identity,omitempty"`
	// 链名称
	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// 合约名称
	Contract string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	// 调用参数
	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *RequestQueryOrInvokeContract) Reset() {
	*x = RequestQueryOrInvokeContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQueryOrInvokeContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQueryOrInvokeContract) ProtoMessage() {}

func (x *RequestQueryOrInvokeContract) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQueryOrInvokeContract.ProtoReflect.Descriptor instead.
func (*RequestQueryOrInvokeContract) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{5}
}

func (x *RequestQueryOrInvokeContract) GetIdentity() *DigitalIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *RequestQueryOrInvokeContract) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *RequestQueryOrInvokeContract) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *RequestQueryOrInvokeContract) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type ResponseChannelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []string `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *ResponseChannelList) Reset() {
	*x = ResponseChannelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseChannelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseChannelList) ProtoMessage() {}

func (x *ResponseChannelList) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseChannelList.ProtoReflect.Descriptor instead.
func (*ResponseChannelList) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseChannelList) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ResponseContractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contracts []string `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
}

func (x *ResponseContractList) Reset() {
	*x = ResponseContractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseContractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseContractList) ProtoMessage() {}

func (x *ResponseContractList) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseContractList.ProtoReflect.Descriptor instead.
func (*ResponseContractList) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseContractList) GetContracts() []string {
	if x != nil {
		return x.Contracts
	}
	return nil
}

type RequestQueryBlockByNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Num     uint64   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *RequestQueryBlockByNum) Reset() {
	*x = RequestQueryBlockByNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQueryBlockByNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQueryBlockByNum) ProtoMessage() {}

func (x *RequestQueryBlockByNum) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQueryBlockByNum.ProtoReflect.Descriptor instead.
func (*RequestQueryBlockByNum) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{8}
}

func (x *RequestQueryBlockByNum) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *RequestQueryBlockByNum) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type RequestQueryBlockTxId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	TxId    string   `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *RequestQueryBlockTxId) Reset() {
	*x = RequestQueryBlockTxId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQueryBlockTxId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQueryBlockTxId) ProtoMessage() {}

func (x *RequestQueryBlockTxId) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQueryBlockTxId.ProtoReflect.Descriptor instead.
func (*RequestQueryBlockTxId) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{9}
}

func (x *RequestQueryBlockTxId) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *RequestQueryBlockTxId) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type RequestQueryBlockByHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Hash    []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *RequestQueryBlockByHash) Reset() {
	*x = RequestQueryBlockByHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQueryBlockByHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQueryBlockByHash) ProtoMessage() {}

func (x *RequestQueryBlockByHash) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQueryBlockByHash.ProtoReflect.Descriptor instead.
func (*RequestQueryBlockByHash) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{10}
}

func (x *RequestQueryBlockByHash) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *RequestQueryBlockByHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type RequestQueryTxById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	TxId    string   `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *RequestQueryTxById) Reset() {
	*x = RequestQueryTxById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestQueryTxById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestQueryTxById) ProtoMessage() {}

func (x *RequestQueryTxById) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestQueryTxById.ProtoReflect.Descriptor instead.
func (*RequestQueryTxById) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{11}
}

func (x *RequestQueryTxById) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *RequestQueryTxById) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

var File_network_proto protoreflect.FileDescriptor

var file_network_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x09, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x22, 0x1f, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x55, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x29, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x31, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x34, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x57, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x22, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x54, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x13, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x32, 0x9c, 0x0c, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x35,
	0x0a, 0x0a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x42, 0x12, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72, 0x69, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x44, 0x42, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x11, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4f, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d,
	0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x54, 0x78, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x78, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x78, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_network_proto_rawDescOnce sync.Once
	file_network_proto_rawDescData = file_network_proto_rawDesc
)

func file_network_proto_rawDescGZIP() []byte {
	file_network_proto_rawDescOnce.Do(func() {
		file_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_proto_rawDescData)
	})
	return file_network_proto_rawDescData
}

var file_network_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_network_proto_goTypes = []interface{}{
	(*Artifacts)(nil),                    // 0: protos.Artifacts
	(*ResponseNodes)(nil),                // 1: protos.ResponseNodes
	(*RequestRegister)(nil),              // 2: protos.RequestRegister
	(*ResponseUri)(nil),                  // 3: protos.ResponseUri
	(*RequestSetupContract)(nil),         // 4: protos.RequestSetupContract
	(*RequestQueryOrInvokeContract)(nil), // 5: protos.RequestQueryOrInvokeContract
	(*ResponseChannelList)(nil),          // 6: protos.ResponseChannelList
	(*ResponseContractList)(nil),         // 7: protos.ResponseContractList
	(*RequestQueryBlockByNum)(nil),       // 8: protos.RequestQueryBlockByNum
	(*RequestQueryBlockTxId)(nil),        // 9: protos.RequestQueryBlockTxId
	(*RequestQueryBlockByHash)(nil),      // 10: protos.RequestQueryBlockByHash
	(*RequestQueryTxById)(nil),           // 11: protos.RequestQueryTxById
	(*Node)(nil),                         // 12: protos.Node
	(*Chain)(nil),                        // 13: protos.Chain
	(*Channel)(nil),                      // 14: protos.Channel
	(*Contract)(nil),                     // 15: protos.Contract
	(*DigitalIdentity)(nil),              // 16: protos.DigitalIdentity
	(*emptypb.Empty)(nil),                // 17: google.protobuf.Empty
	(*ChainStatus)(nil),                  // 18: protos.ChainStatus
	(*TransactionResponse)(nil),          // 19: protos.TransactionResponse
	(*ChannelInformation)(nil),           // 20: protos.ChannelInformation
	(*InnerBlock)(nil),                   // 21: protos.InnerBlock
	(*InnerTransaction)(nil),             // 22: protos.InnerTransaction
}
var file_network_proto_depIdxs = []int32{
	12, // 0: protos.ResponseNodes.nodes:type_name -> protos.Node
	13, // 1: protos.RequestRegister.chain:type_name -> protos.Chain
	14, // 2: protos.RequestSetupContract.channel:type_name -> protos.Channel
	15, // 3: protos.RequestSetupContract.contract:type_name -> protos.Contract
	16, // 4: protos.RequestQueryOrInvokeContract.Identity:type_name -> protos.DigitalIdentity
	14, // 5: protos.RequestQueryOrInvokeContract.channel:type_name -> protos.Channel
	14, // 6: protos.RequestQueryBlockByNum.channel:type_name -> protos.Channel
	14, // 7: protos.RequestQueryBlockTxId.channel:type_name -> protos.Channel
	14, // 8: protos.RequestQueryBlockByHash.channel:type_name -> protos.Channel
	14, // 9: protos.RequestQueryTxById.channel:type_name -> protos.Channel
	13, // 10: protos.Network.BuildChain:input_type -> protos.Chain
	14, // 11: protos.Network.BuildChannel:input_type -> protos.Channel
	13, // 12: protos.Network.StartChain:input_type -> protos.Chain
	13, // 13: protos.Network.IsRunning:input_type -> protos.Chain
	13, // 14: protos.Network.StopChain:input_type -> protos.Chain
	13, // 15: protos.Network.IsStopped:input_type -> protos.Chain
	13, // 16: protos.Network.DeleteChain:input_type -> protos.Chain
	13, // 17: protos.Network.EnableSyncDB:input_type -> protos.Chain
	13, // 18: protos.Network.DisableSyncDB:input_type -> protos.Chain
	13, // 19: protos.Network.DownloadArtifacts:input_type -> protos.Chain
	2,  // 20: protos.Network.Register:input_type -> protos.RequestRegister
	4,  // 21: protos.Network.InstallContract:input_type -> protos.RequestSetupContract
	4,  // 22: protos.Network.UpdateContract:input_type -> protos.RequestSetupContract
	5,  // 23: protos.Network.QueryContract:input_type -> protos.RequestQueryOrInvokeContract
	5,  // 24: protos.Network.InvokeContract:input_type -> protos.RequestQueryOrInvokeContract
	13, // 25: protos.Network.QueryChainNodes:input_type -> protos.Chain
	13, // 26: protos.Network.QueryChannelList:input_type -> protos.Chain
	14, // 27: protos.Network.QueryChannel:input_type -> protos.Channel
	14, // 28: protos.Network.QueryContractList:input_type -> protos.Channel
	14, // 29: protos.Network.QueryLatestBlock:input_type -> protos.Channel
	8,  // 30: protos.Network.QueryBlockByNum:input_type -> protos.RequestQueryBlockByNum
	9,  // 31: protos.Network.QueryBlockByTxId:input_type -> protos.RequestQueryBlockTxId
	10, // 32: protos.Network.QueryBlockByHash:input_type -> protos.RequestQueryBlockByHash
	11, // 33: protos.Network.QueryTxById:input_type -> protos.RequestQueryTxById
	17, // 34: protos.Network.BuildChain:output_type -> google.protobuf.Empty
	17, // 35: protos.Network.BuildChannel:output_type -> google.protobuf.Empty
	17, // 36: protos.Network.StartChain:output_type -> google.protobuf.Empty
	18, // 37: protos.Network.IsRunning:output_type -> protos.ChainStatus
	17, // 38: protos.Network.StopChain:output_type -> google.protobuf.Empty
	18, // 39: protos.Network.IsStopped:output_type -> protos.ChainStatus
	17, // 40: protos.Network.DeleteChain:output_type -> google.protobuf.Empty
	3,  // 41: protos.Network.EnableSyncDB:output_type -> protos.ResponseUri
	17, // 42: protos.Network.DisableSyncDB:output_type -> google.protobuf.Empty
	0,  // 43: protos.Network.DownloadArtifacts:output_type -> protos.Artifacts
	16, // 44: protos.Network.Register:output_type -> protos.DigitalIdentity
	19, // 45: protos.Network.InstallContract:output_type -> protos.TransactionResponse
	19, // 46: protos.Network.UpdateContract:output_type -> protos.TransactionResponse
	19, // 47: protos.Network.QueryContract:output_type -> protos.TransactionResponse
	19, // 48: protos.Network.InvokeContract:output_type -> protos.TransactionResponse
	1,  // 49: protos.Network.QueryChainNodes:output_type -> protos.ResponseNodes
	6,  // 50: protos.Network.QueryChannelList:output_type -> protos.ResponseChannelList
	20, // 51: protos.Network.QueryChannel:output_type -> protos.ChannelInformation
	7,  // 52: protos.Network.QueryContractList:output_type -> protos.ResponseContractList
	21, // 53: protos.Network.QueryLatestBlock:output_type -> protos.InnerBlock
	21, // 54: protos.Network.QueryBlockByNum:output_type -> protos.InnerBlock
	21, // 55: protos.Network.QueryBlockByTxId:output_type -> protos.InnerBlock
	21, // 56: protos.Network.QueryBlockByHash:output_type -> protos.InnerBlock
	22, // 57: protos.Network.QueryTxById:output_type -> protos.InnerTransaction
	34, // [34:58] is the sub-list for method output_type
	10, // [10:34] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_network_proto_init() }
func file_network_proto_init() {
	if File_network_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artifacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRegister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseUri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSetupContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQueryOrInvokeContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseChannelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseContractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQueryBlockByNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQueryBlockTxId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQueryBlockByHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestQueryTxById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_proto_goTypes,
		DependencyIndexes: file_network_proto_depIdxs,
		MessageInfos:      file_network_proto_msgTypes,
	}.Build()
	File_network_proto = out.File
	file_network_proto_rawDesc = nil
	file_network_proto_goTypes = nil
	file_network_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
	// 构建区块链网络所需要的全部文件，包括启动k8s文件
	BuildChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 创建一条链（通道）
	BuildChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 在k8s中运行网络
	StartChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查看网络是否完全运行
	IsRunning(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ChainStatus, error)
	// 停止运行
	StopChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 是否完全停止
	IsStopped(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ChainStatus, error)
	// 删除网络全部数据文件
	DeleteChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 启用同步数据库
	EnableSyncDB(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseUri, error)
	// 停用同步数据库
	DisableSyncDB(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 下载区块链网络数据
	DownloadArtifacts(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*Artifacts, error)
	// 注册数字身份
	Register(ctx context.Context, in *RequestRegister, opts ...grpc.CallOption) (*DigitalIdentity, error)
	// 安装合约
	InstallContract(ctx context.Context, in *RequestSetupContract, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 更新合约
	UpdateContract(ctx context.Context, in *RequestSetupContract, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 查询合约，产生交易
	QueryContract(ctx context.Context, in *RequestQueryOrInvokeContract, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 调用合约，产生交易
	InvokeContract(ctx context.Context, in *RequestQueryOrInvokeContract, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 查询网络pod资源
	QueryChainNodes(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseNodes, error)
	// 查询链列表
	QueryChannelList(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseChannelList, error)
	// 查询链信息
	QueryChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ChannelInformation, error)
	// 查询合约列表
	QueryContractList(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ResponseContractList, error)
	// 查询链最新块
	QueryLatestBlock(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*InnerBlock, error)
	// 根据块高度查询块
	QueryBlockByNum(ctx context.Context, in *RequestQueryBlockByNum, opts ...grpc.CallOption) (*InnerBlock, error)
	// 根据交易ID查询块
	QueryBlockByTxId(ctx context.Context, in *RequestQueryBlockTxId, opts ...grpc.CallOption) (*InnerBlock, error)
	// 根据块Hash查询块
	QueryBlockByHash(ctx context.Context, in *RequestQueryBlockByHash, opts ...grpc.CallOption) (*InnerBlock, error)
	// 根据交易ID查询交易
	QueryTxById(ctx context.Context, in *RequestQueryTxById, opts ...grpc.CallOption) (*InnerTransaction, error)
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) BuildChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/BuildChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) BuildChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/BuildChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) StartChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/StartChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) IsRunning(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ChainStatus, error) {
	out := new(ChainStatus)
	err := c.cc.Invoke(ctx, "/protos.Network/IsRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) StopChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/StopChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) IsStopped(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ChainStatus, error) {
	out := new(ChainStatus)
	err := c.cc.Invoke(ctx, "/protos.Network/IsStopped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/DeleteChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) EnableSyncDB(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseUri, error) {
	out := new(ResponseUri)
	err := c.cc.Invoke(ctx, "/protos.Network/EnableSyncDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DisableSyncDB(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/DisableSyncDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DownloadArtifacts(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*Artifacts, error) {
	out := new(Artifacts)
	err := c.cc.Invoke(ctx, "/protos.Network/DownloadArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) Register(ctx context.Context, in *RequestRegister, opts ...grpc.CallOption) (*DigitalIdentity, error) {
	out := new(DigitalIdentity)
	err := c.cc.Invoke(ctx, "/protos.Network/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) InstallContract(ctx context.Context, in *RequestSetupContract, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/protos.Network/InstallContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateContract(ctx context.Context, in *RequestSetupContract, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/protos.Network/UpdateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryContract(ctx context.Context, in *RequestQueryOrInvokeContract, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) InvokeContract(ctx context.Context, in *RequestQueryOrInvokeContract, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/protos.Network/InvokeContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryChainNodes(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseNodes, error) {
	out := new(ResponseNodes)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryChainNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryChannelList(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseChannelList, error) {
	out := new(ResponseChannelList)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryChannelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ChannelInformation, error) {
	out := new(ChannelInformation)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryContractList(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ResponseContractList, error) {
	out := new(ResponseContractList)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryContractList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryLatestBlock(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*InnerBlock, error) {
	out := new(InnerBlock)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryLatestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryBlockByNum(ctx context.Context, in *RequestQueryBlockByNum, opts ...grpc.CallOption) (*InnerBlock, error) {
	out := new(InnerBlock)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryBlockByTxId(ctx context.Context, in *RequestQueryBlockTxId, opts ...grpc.CallOption) (*InnerBlock, error) {
	out := new(InnerBlock)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryBlockByTxId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryBlockByHash(ctx context.Context, in *RequestQueryBlockByHash, opts ...grpc.CallOption) (*InnerBlock, error) {
	out := new(InnerBlock)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryTxById(ctx context.Context, in *RequestQueryTxById, opts ...grpc.CallOption) (*InnerTransaction, error) {
	out := new(InnerTransaction)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryTxById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
	// 构建区块链网络所需要的全部文件，包括启动k8s文件
	BuildChain(context.Context, *Chain) (*emptypb.Empty, error)
	// 创建一条链（通道）
	BuildChannel(context.Context, *Channel) (*emptypb.Empty, error)
	// 在k8s中运行网络
	StartChain(context.Context, *Chain) (*emptypb.Empty, error)
	// 查看网络是否完全运行
	IsRunning(context.Context, *Chain) (*ChainStatus, error)
	// 停止运行
	StopChain(context.Context, *Chain) (*emptypb.Empty, error)
	// 是否完全停止
	IsStopped(context.Context, *Chain) (*ChainStatus, error)
	// 删除网络全部数据文件
	DeleteChain(context.Context, *Chain) (*emptypb.Empty, error)
	// 启用同步数据库
	EnableSyncDB(context.Context, *Chain) (*ResponseUri, error)
	// 停用同步数据库
	DisableSyncDB(context.Context, *Chain) (*emptypb.Empty, error)
	// 下载区块链网络数据
	DownloadArtifacts(context.Context, *Chain) (*Artifacts, error)
	// 注册数字身份
	Register(context.Context, *RequestRegister) (*DigitalIdentity, error)
	// 安装合约
	InstallContract(context.Context, *RequestSetupContract) (*TransactionResponse, error)
	// 更新合约
	UpdateContract(context.Context, *RequestSetupContract) (*TransactionResponse, error)
	// 查询合约，产生交易
	QueryContract(context.Context, *RequestQueryOrInvokeContract) (*TransactionResponse, error)
	// 调用合约，产生交易
	InvokeContract(context.Context, *RequestQueryOrInvokeContract) (*TransactionResponse, error)
	// 查询网络pod资源
	QueryChainNodes(context.Context, *Chain) (*ResponseNodes, error)
	// 查询链列表
	QueryChannelList(context.Context, *Chain) (*ResponseChannelList, error)
	// 查询链信息
	QueryChannel(context.Context, *Channel) (*ChannelInformation, error)
	// 查询合约列表
	QueryContractList(context.Context, *Channel) (*ResponseContractList, error)
	// 查询链最新块
	QueryLatestBlock(context.Context, *Channel) (*InnerBlock, error)
	// 根据块高度查询块
	QueryBlockByNum(context.Context, *RequestQueryBlockByNum) (*InnerBlock, error)
	// 根据交易ID查询块
	QueryBlockByTxId(context.Context, *RequestQueryBlockTxId) (*InnerBlock, error)
	// 根据块Hash查询块
	QueryBlockByHash(context.Context, *RequestQueryBlockByHash) (*InnerBlock, error)
	// 根据交易ID查询交易
	QueryTxById(context.Context, *RequestQueryTxById) (*InnerTransaction, error)
}

// UnimplementedNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (*UnimplementedNetworkServer) BuildChain(context.Context, *Chain) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildChain not implemented")
}
func (*UnimplementedNetworkServer) BuildChannel(context.Context, *Channel) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildChannel not implemented")
}
func (*UnimplementedNetworkServer) StartChain(context.Context, *Chain) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChain not implemented")
}
func (*UnimplementedNetworkServer) IsRunning(context.Context, *Chain) (*ChainStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRunning not implemented")
}
func (*UnimplementedNetworkServer) StopChain(context.Context, *Chain) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChain not implemented")
}
func (*UnimplementedNetworkServer) IsStopped(context.Context, *Chain) (*ChainStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStopped not implemented")
}
func (*UnimplementedNetworkServer) DeleteChain(context.Context, *Chain) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChain not implemented")
}
func (*UnimplementedNetworkServer) EnableSyncDB(context.Context, *Chain) (*ResponseUri, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSyncDB not implemented")
}
func (*UnimplementedNetworkServer) DisableSyncDB(context.Context, *Chain) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSyncDB not implemented")
}
func (*UnimplementedNetworkServer) DownloadArtifacts(context.Context, *Chain) (*Artifacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadArtifacts not implemented")
}
func (*UnimplementedNetworkServer) Register(context.Context, *RequestRegister) (*DigitalIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedNetworkServer) InstallContract(context.Context, *RequestSetupContract) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallContract not implemented")
}
func (*UnimplementedNetworkServer) UpdateContract(context.Context, *RequestSetupContract) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (*UnimplementedNetworkServer) QueryContract(context.Context, *RequestQueryOrInvokeContract) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryContract not implemented")
}
func (*UnimplementedNetworkServer) InvokeContract(context.Context, *RequestQueryOrInvokeContract) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeContract not implemented")
}
func (*UnimplementedNetworkServer) QueryChainNodes(context.Context, *Chain) (*ResponseNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChainNodes not implemented")
}
func (*UnimplementedNetworkServer) QueryChannelList(context.Context, *Chain) (*ResponseChannelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChannelList not implemented")
}
func (*UnimplementedNetworkServer) QueryChannel(context.Context, *Channel) (*ChannelInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChannel not implemented")
}
func (*UnimplementedNetworkServer) QueryContractList(context.Context, *Channel) (*ResponseContractList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryContractList not implemented")
}
func (*UnimplementedNetworkServer) QueryLatestBlock(context.Context, *Channel) (*InnerBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLatestBlock not implemented")
}
func (*UnimplementedNetworkServer) QueryBlockByNum(context.Context, *RequestQueryBlockByNum) (*InnerBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockByNum not implemented")
}
func (*UnimplementedNetworkServer) QueryBlockByTxId(context.Context, *RequestQueryBlockTxId) (*InnerBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockByTxId not implemented")
}
func (*UnimplementedNetworkServer) QueryBlockByHash(context.Context, *RequestQueryBlockByHash) (*InnerBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockByHash not implemented")
}
func (*UnimplementedNetworkServer) QueryTxById(context.Context, *RequestQueryTxById) (*InnerTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTxById not implemented")
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_BuildChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).BuildChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/BuildChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).BuildChain(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_BuildChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).BuildChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/BuildChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).BuildChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_StartChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).StartChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/StartChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).StartChain(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_IsRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).IsRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/IsRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).IsRunning(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_StopChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).StopChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/StopChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).StopChain(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_IsStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).IsStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/IsStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).IsStopped(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/DeleteChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteChain(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_EnableSyncDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).EnableSyncDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/EnableSyncDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).EnableSyncDB(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DisableSyncDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DisableSyncDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/DisableSyncDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DisableSyncDB(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DownloadArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DownloadArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/DownloadArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DownloadArtifacts(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).Register(ctx, req.(*RequestRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_InstallContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetupContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).InstallContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/InstallContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).InstallContract(ctx, req.(*RequestSetupContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetupContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/UpdateContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateContract(ctx, req.(*RequestSetupContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryOrInvokeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryContract(ctx, req.(*RequestQueryOrInvokeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_InvokeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryOrInvokeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).InvokeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/InvokeContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).InvokeContract(ctx, req.(*RequestQueryOrInvokeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryChainNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryChainNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryChainNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryChainNodes(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryChannelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryChannelList(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryContractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryContractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryContractList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryContractList(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryLatestBlock(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryBlockByNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryBlockByNum(ctx, req.(*RequestQueryBlockByNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryBlockByTxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryBlockTxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryBlockByTxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryBlockByTxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryBlockByTxId(ctx, req.(*RequestQueryBlockTxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryBlockByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryBlockByHash(ctx, req.(*RequestQueryBlockByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryTxById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryTxById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryTxById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryTxById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryTxById(ctx, req.(*RequestQueryTxById))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildChain",
			Handler:    _Network_BuildChain_Handler,
		},
		{
			MethodName: "BuildChannel",
			Handler:    _Network_BuildChannel_Handler,
		},
		{
			MethodName: "StartChain",
			Handler:    _Network_StartChain_Handler,
		},
		{
			MethodName: "IsRunning",
			Handler:    _Network_IsRunning_Handler,
		},
		{
			MethodName: "StopChain",
			Handler:    _Network_StopChain_Handler,
		},
		{
			MethodName: "IsStopped",
			Handler:    _Network_IsStopped_Handler,
		},
		{
			MethodName: "DeleteChain",
			Handler:    _Network_DeleteChain_Handler,
		},
		{
			MethodName: "EnableSyncDB",
			Handler:    _Network_EnableSyncDB_Handler,
		},
		{
			MethodName: "DisableSyncDB",
			Handler:    _Network_DisableSyncDB_Handler,
		},
		{
			MethodName: "DownloadArtifacts",
			Handler:    _Network_DownloadArtifacts_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Network_Register_Handler,
		},
		{
			MethodName: "InstallContract",
			Handler:    _Network_InstallContract_Handler,
		},
		{
			MethodName: "UpdateContract",
			Handler:    _Network_UpdateContract_Handler,
		},
		{
			MethodName: "QueryContract",
			Handler:    _Network_QueryContract_Handler,
		},
		{
			MethodName: "InvokeContract",
			Handler:    _Network_InvokeContract_Handler,
		},
		{
			MethodName: "QueryChainNodes",
			Handler:    _Network_QueryChainNodes_Handler,
		},
		{
			MethodName: "QueryChannelList",
			Handler:    _Network_QueryChannelList_Handler,
		},
		{
			MethodName: "QueryChannel",
			Handler:    _Network_QueryChannel_Handler,
		},
		{
			MethodName: "QueryContractList",
			Handler:    _Network_QueryContractList_Handler,
		},
		{
			MethodName: "QueryLatestBlock",
			Handler:    _Network_QueryLatestBlock_Handler,
		},
		{
			MethodName: "QueryBlockByNum",
			Handler:    _Network_QueryBlockByNum_Handler,
		},
		{
			MethodName: "QueryBlockByTxId",
			Handler:    _Network_QueryBlockByTxId_Handler,
		},
		{
			MethodName: "QueryBlockByHash",
			Handler:    _Network_QueryBlockByHash_Handler,
		},
		{
			MethodName: "QueryTxById",
			Handler:    _Network_QueryTxById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
