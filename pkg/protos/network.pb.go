// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Artifacts struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artifacts) Reset()         { *m = Artifacts{} }
func (m *Artifacts) String() string { return proto.CompactTextString(m) }
func (*Artifacts) ProtoMessage()    {}
func (*Artifacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}

func (m *Artifacts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artifacts.Unmarshal(m, b)
}
func (m *Artifacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artifacts.Marshal(b, m, deterministic)
}
func (m *Artifacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifacts.Merge(m, src)
}
func (m *Artifacts) XXX_Size() int {
	return xxx_messageInfo_Artifacts.Size(m)
}
func (m *Artifacts) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifacts.DiscardUnknown(m)
}

var xxx_messageInfo_Artifacts proto.InternalMessageInfo

func (m *Artifacts) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResponseNodes struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseNodes) Reset()         { *m = ResponseNodes{} }
func (m *ResponseNodes) String() string { return proto.CompactTextString(m) }
func (*ResponseNodes) ProtoMessage()    {}
func (*ResponseNodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}

func (m *ResponseNodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseNodes.Unmarshal(m, b)
}
func (m *ResponseNodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseNodes.Marshal(b, m, deterministic)
}
func (m *ResponseNodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseNodes.Merge(m, src)
}
func (m *ResponseNodes) XXX_Size() int {
	return xxx_messageInfo_ResponseNodes.Size(m)
}
func (m *ResponseNodes) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseNodes.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseNodes proto.InternalMessageInfo

func (m *ResponseNodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type RequestRegister struct {
	Chain                *Chain   `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	User                 string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Pwd                  string   `protobuf:"bytes,3,opt,name=pwd,proto3" json:"pwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestRegister) Reset()         { *m = RequestRegister{} }
func (m *RequestRegister) String() string { return proto.CompactTextString(m) }
func (*RequestRegister) ProtoMessage()    {}
func (*RequestRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2}
}

func (m *RequestRegister) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestRegister.Unmarshal(m, b)
}
func (m *RequestRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestRegister.Marshal(b, m, deterministic)
}
func (m *RequestRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRegister.Merge(m, src)
}
func (m *RequestRegister) XXX_Size() int {
	return xxx_messageInfo_RequestRegister.Size(m)
}
func (m *RequestRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRegister.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRegister proto.InternalMessageInfo

func (m *RequestRegister) GetChain() *Chain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *RequestRegister) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *RequestRegister) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

type RequestSetupContract struct {
	Channel              *Channel  `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Contract             *Contract `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RequestSetupContract) Reset()         { *m = RequestSetupContract{} }
func (m *RequestSetupContract) String() string { return proto.CompactTextString(m) }
func (*RequestSetupContract) ProtoMessage()    {}
func (*RequestSetupContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{3}
}

func (m *RequestSetupContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestSetupContract.Unmarshal(m, b)
}
func (m *RequestSetupContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestSetupContract.Marshal(b, m, deterministic)
}
func (m *RequestSetupContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetupContract.Merge(m, src)
}
func (m *RequestSetupContract) XXX_Size() int {
	return xxx_messageInfo_RequestSetupContract.Size(m)
}
func (m *RequestSetupContract) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetupContract.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetupContract proto.InternalMessageInfo

func (m *RequestSetupContract) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *RequestSetupContract) GetContract() *Contract {
	if m != nil {
		return m.Contract
	}
	return nil
}

type RequestQueryOrInvokeContract struct {
	// 数字身份
	Identity *DigitalIdentity `protobuf:"bytes,2,opt,name=Identity,proto3" json:"Identity,omitempty"`
	// 链名称
	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// 合约名称
	Contract string `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	// 调用参数
	Args                 []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestQueryOrInvokeContract) Reset()         { *m = RequestQueryOrInvokeContract{} }
func (m *RequestQueryOrInvokeContract) String() string { return proto.CompactTextString(m) }
func (*RequestQueryOrInvokeContract) ProtoMessage()    {}
func (*RequestQueryOrInvokeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{4}
}

func (m *RequestQueryOrInvokeContract) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestQueryOrInvokeContract.Unmarshal(m, b)
}
func (m *RequestQueryOrInvokeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestQueryOrInvokeContract.Marshal(b, m, deterministic)
}
func (m *RequestQueryOrInvokeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQueryOrInvokeContract.Merge(m, src)
}
func (m *RequestQueryOrInvokeContract) XXX_Size() int {
	return xxx_messageInfo_RequestQueryOrInvokeContract.Size(m)
}
func (m *RequestQueryOrInvokeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQueryOrInvokeContract.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQueryOrInvokeContract proto.InternalMessageInfo

func (m *RequestQueryOrInvokeContract) GetIdentity() *DigitalIdentity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *RequestQueryOrInvokeContract) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *RequestQueryOrInvokeContract) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *RequestQueryOrInvokeContract) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ResponseChannelList struct {
	Channels             []string `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseChannelList) Reset()         { *m = ResponseChannelList{} }
func (m *ResponseChannelList) String() string { return proto.CompactTextString(m) }
func (*ResponseChannelList) ProtoMessage()    {}
func (*ResponseChannelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{5}
}

func (m *ResponseChannelList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseChannelList.Unmarshal(m, b)
}
func (m *ResponseChannelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseChannelList.Marshal(b, m, deterministic)
}
func (m *ResponseChannelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseChannelList.Merge(m, src)
}
func (m *ResponseChannelList) XXX_Size() int {
	return xxx_messageInfo_ResponseChannelList.Size(m)
}
func (m *ResponseChannelList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseChannelList.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseChannelList proto.InternalMessageInfo

func (m *ResponseChannelList) GetChannels() []string {
	if m != nil {
		return m.Channels
	}
	return nil
}

type ResponseContractList struct {
	Contracts            []*Contract `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResponseContractList) Reset()         { *m = ResponseContractList{} }
func (m *ResponseContractList) String() string { return proto.CompactTextString(m) }
func (*ResponseContractList) ProtoMessage()    {}
func (*ResponseContractList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{6}
}

func (m *ResponseContractList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseContractList.Unmarshal(m, b)
}
func (m *ResponseContractList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseContractList.Marshal(b, m, deterministic)
}
func (m *ResponseContractList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseContractList.Merge(m, src)
}
func (m *ResponseContractList) XXX_Size() int {
	return xxx_messageInfo_ResponseContractList.Size(m)
}
func (m *ResponseContractList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseContractList.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseContractList proto.InternalMessageInfo

func (m *ResponseContractList) GetContracts() []*Contract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

type RequestQueryBlockByNum struct {
	Channel              *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Num                  uint64   `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestQueryBlockByNum) Reset()         { *m = RequestQueryBlockByNum{} }
func (m *RequestQueryBlockByNum) String() string { return proto.CompactTextString(m) }
func (*RequestQueryBlockByNum) ProtoMessage()    {}
func (*RequestQueryBlockByNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{7}
}

func (m *RequestQueryBlockByNum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestQueryBlockByNum.Unmarshal(m, b)
}
func (m *RequestQueryBlockByNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestQueryBlockByNum.Marshal(b, m, deterministic)
}
func (m *RequestQueryBlockByNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQueryBlockByNum.Merge(m, src)
}
func (m *RequestQueryBlockByNum) XXX_Size() int {
	return xxx_messageInfo_RequestQueryBlockByNum.Size(m)
}
func (m *RequestQueryBlockByNum) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQueryBlockByNum.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQueryBlockByNum proto.InternalMessageInfo

func (m *RequestQueryBlockByNum) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *RequestQueryBlockByNum) GetNum() uint64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type RequestQueryBlockTxId struct {
	Channel              *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	TxId                 string   `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestQueryBlockTxId) Reset()         { *m = RequestQueryBlockTxId{} }
func (m *RequestQueryBlockTxId) String() string { return proto.CompactTextString(m) }
func (*RequestQueryBlockTxId) ProtoMessage()    {}
func (*RequestQueryBlockTxId) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{8}
}

func (m *RequestQueryBlockTxId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestQueryBlockTxId.Unmarshal(m, b)
}
func (m *RequestQueryBlockTxId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestQueryBlockTxId.Marshal(b, m, deterministic)
}
func (m *RequestQueryBlockTxId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQueryBlockTxId.Merge(m, src)
}
func (m *RequestQueryBlockTxId) XXX_Size() int {
	return xxx_messageInfo_RequestQueryBlockTxId.Size(m)
}
func (m *RequestQueryBlockTxId) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQueryBlockTxId.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQueryBlockTxId proto.InternalMessageInfo

func (m *RequestQueryBlockTxId) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *RequestQueryBlockTxId) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type RequestQueryBlockByHash struct {
	Channel              *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestQueryBlockByHash) Reset()         { *m = RequestQueryBlockByHash{} }
func (m *RequestQueryBlockByHash) String() string { return proto.CompactTextString(m) }
func (*RequestQueryBlockByHash) ProtoMessage()    {}
func (*RequestQueryBlockByHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{9}
}

func (m *RequestQueryBlockByHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestQueryBlockByHash.Unmarshal(m, b)
}
func (m *RequestQueryBlockByHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestQueryBlockByHash.Marshal(b, m, deterministic)
}
func (m *RequestQueryBlockByHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQueryBlockByHash.Merge(m, src)
}
func (m *RequestQueryBlockByHash) XXX_Size() int {
	return xxx_messageInfo_RequestQueryBlockByHash.Size(m)
}
func (m *RequestQueryBlockByHash) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQueryBlockByHash.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQueryBlockByHash proto.InternalMessageInfo

func (m *RequestQueryBlockByHash) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *RequestQueryBlockByHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type RequestQueryTxById struct {
	Channel              *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	TxId                 string   `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestQueryTxById) Reset()         { *m = RequestQueryTxById{} }
func (m *RequestQueryTxById) String() string { return proto.CompactTextString(m) }
func (*RequestQueryTxById) ProtoMessage()    {}
func (*RequestQueryTxById) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{10}
}

func (m *RequestQueryTxById) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestQueryTxById.Unmarshal(m, b)
}
func (m *RequestQueryTxById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestQueryTxById.Marshal(b, m, deterministic)
}
func (m *RequestQueryTxById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQueryTxById.Merge(m, src)
}
func (m *RequestQueryTxById) XXX_Size() int {
	return xxx_messageInfo_RequestQueryTxById.Size(m)
}
func (m *RequestQueryTxById) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQueryTxById.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQueryTxById proto.InternalMessageInfo

func (m *RequestQueryTxById) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *RequestQueryTxById) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type FullBlock struct {
	Block                *Block         `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Txs                  []*Transaction `protobuf:"bytes,2,rep,name=txs,proto3" json:"txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FullBlock) Reset()         { *m = FullBlock{} }
func (m *FullBlock) String() string { return proto.CompactTextString(m) }
func (*FullBlock) ProtoMessage()    {}
func (*FullBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{11}
}

func (m *FullBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FullBlock.Unmarshal(m, b)
}
func (m *FullBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FullBlock.Marshal(b, m, deterministic)
}
func (m *FullBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullBlock.Merge(m, src)
}
func (m *FullBlock) XXX_Size() int {
	return xxx_messageInfo_FullBlock.Size(m)
}
func (m *FullBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FullBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FullBlock proto.InternalMessageInfo

func (m *FullBlock) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *FullBlock) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func init() {
	proto.RegisterType((*Artifacts)(nil), "protos.Artifacts")
	proto.RegisterType((*ResponseNodes)(nil), "protos.ResponseNodes")
	proto.RegisterType((*RequestRegister)(nil), "protos.RequestRegister")
	proto.RegisterType((*RequestSetupContract)(nil), "protos.RequestSetupContract")
	proto.RegisterType((*RequestQueryOrInvokeContract)(nil), "protos.RequestQueryOrInvokeContract")
	proto.RegisterType((*ResponseChannelList)(nil), "protos.ResponseChannelList")
	proto.RegisterType((*ResponseContractList)(nil), "protos.ResponseContractList")
	proto.RegisterType((*RequestQueryBlockByNum)(nil), "protos.RequestQueryBlockByNum")
	proto.RegisterType((*RequestQueryBlockTxId)(nil), "protos.RequestQueryBlockTxId")
	proto.RegisterType((*RequestQueryBlockByHash)(nil), "protos.RequestQueryBlockByHash")
	proto.RegisterType((*RequestQueryTxById)(nil), "protos.RequestQueryTxById")
	proto.RegisterType((*FullBlock)(nil), "protos.FullBlock")
}

func init() {
	proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816)
}

var fileDescriptor_8571034d60397816 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x51, 0x6f, 0xdb, 0x36,
	0x10, 0xc7, 0xe5, 0x3a, 0x59, 0xe3, 0xb3, 0x53, 0x3b, 0xf4, 0xda, 0x1a, 0x4a, 0xb6, 0x1a, 0xdc,
	0x06, 0x64, 0xc0, 0xe0, 0xa2, 0xce, 0xba, 0xad, 0x0f, 0x1b, 0x3a, 0xd7, 0x0b, 0x6a, 0xa0, 0xf3,
	0x30, 0xd9, 0x41, 0xf7, 0x30, 0x60, 0x60, 0x24, 0xc6, 0x16, 0x22, 0x93, 0x9a, 0x48, 0x2d, 0xf6,
	0xe7, 0xd9, 0xfb, 0x3e, 0xe3, 0x40, 0x52, 0x92, 0x65, 0x59, 0xc9, 0xe6, 0x22, 0x4f, 0x26, 0x79,
	0x77, 0xbf, 0x3b, 0x1e, 0xc5, 0x3f, 0x0d, 0x87, 0x8c, 0xca, 0x1b, 0x1e, 0x5d, 0xf7, 0xc2, 0x88,
	0x4b, 0x8e, 0x3e, 0xd2, 0x3f, 0xc2, 0x3e, 0x9e, 0x71, 0x3e, 0x0b, 0xe8, 0x73, 0x3d, 0xbd, 0x8c,
	0xaf, 0x9e, 0xd3, 0x45, 0x28, 0x57, 0xc6, 0xc9, 0x6e, 0xb8, 0x7c, 0xb1, 0xe0, 0xcc, 0xcc, 0xf0,
	0x33, 0xa8, 0xfd, 0x18, 0x49, 0xff, 0x8a, 0xb8, 0x52, 0x20, 0x04, 0x7b, 0x1e, 0x91, 0xa4, 0x53,
	0xe9, 0x56, 0x4e, 0x1b, 0x8e, 0x1e, 0xe3, 0x33, 0x38, 0x74, 0xa8, 0x08, 0x39, 0x13, 0x74, 0xcc,
	0x3d, 0x2a, 0x10, 0x86, 0x7d, 0xa6, 0x06, 0x9d, 0x4a, 0xb7, 0x7a, 0x5a, 0xef, 0x37, 0x0c, 0x48,
	0xf4, 0x94, 0xd5, 0x31, 0x26, 0xfc, 0x3b, 0x34, 0x1d, 0xfa, 0x67, 0x4c, 0x85, 0x74, 0xe8, 0xcc,
	0x17, 0x92, 0x46, 0xe8, 0x33, 0xd8, 0x77, 0xe7, 0xc4, 0x67, 0x1a, 0x5e, 0xef, 0x1f, 0xa6, 0x61,
	0x6f, 0xd4, 0xa2, 0x63, 0x6c, 0xaa, 0x80, 0x58, 0xd0, 0xa8, 0xf3, 0xa0, 0x5b, 0x39, 0xad, 0x39,
	0x7a, 0x8c, 0x5a, 0x50, 0x0d, 0x6f, 0xbc, 0x4e, 0x55, 0x2f, 0xa9, 0x21, 0xe6, 0xf0, 0x71, 0x42,
	0x9f, 0x50, 0x19, 0x87, 0x6f, 0x38, 0x93, 0x11, 0x71, 0x25, 0xfa, 0x12, 0x1e, 0xba, 0x73, 0xc2,
	0x18, 0x0d, 0x92, 0x24, 0xcd, 0x5c, 0x12, 0xb5, 0xec, 0xa4, 0x76, 0xf4, 0x15, 0x1c, 0xb8, 0x49,
	0x98, 0x4e, 0x56, 0xef, 0xb7, 0x32, 0xdf, 0x64, 0xdd, 0xc9, 0x3c, 0xf0, 0x3f, 0x15, 0x38, 0x49,
	0x32, 0xfe, 0x1a, 0xd3, 0x68, 0xf5, 0x4b, 0x34, 0x62, 0x7f, 0xf1, 0x6b, 0x9a, 0x65, 0x3e, 0x83,
	0x83, 0x91, 0x47, 0x99, 0xf4, 0xe5, 0x2a, 0xc1, 0x3d, 0x4d, 0x71, 0x43, 0x7f, 0xe6, 0x4b, 0x12,
	0xa4, 0x66, 0x27, 0x73, 0xdc, 0xa5, 0x5c, 0x3b, 0x57, 0xae, 0x69, 0x44, 0x36, 0x57, 0x3d, 0x23,
	0xd1, 0x4c, 0x74, 0xf6, 0xba, 0x55, 0xd5, 0x33, 0x35, 0xc6, 0x2f, 0xa0, 0x9d, 0x1e, 0x5a, 0xc2,
	0x7a, 0xe7, 0x0b, 0xa9, 0x31, 0x66, 0x6a, 0x4e, 0x4f, 0x61, 0x92, 0x39, 0x3e, 0x57, 0x4d, 0x4d,
	0x42, 0x12, 0xb4, 0x8e, 0xe9, 0x41, 0x2d, 0x4d, 0x95, 0x1e, 0xf9, 0x76, 0xab, 0xd6, 0x2e, 0xf8,
	0x02, 0x9e, 0xe4, 0x5b, 0x35, 0x08, 0xb8, 0x7b, 0x3d, 0x58, 0x8d, 0xe3, 0xc5, 0x2e, 0xfb, 0x6d,
	0x41, 0x95, 0xc5, 0x0b, 0xdd, 0xca, 0x3d, 0x47, 0x0d, 0xf1, 0x7b, 0x78, 0xbc, 0x85, 0x9d, 0x2e,
	0x47, 0xde, 0x2e, 0xd4, 0x36, 0xec, 0xcb, 0xe5, 0x1f, 0xbe, 0x97, 0x7e, 0x5e, 0x72, 0x39, 0xf2,
	0xf0, 0x6f, 0xf0, 0xb4, 0xa4, 0xde, 0xb7, 0x44, 0xcc, 0x77, 0x41, 0x23, 0xd8, 0x9b, 0x13, 0x31,
	0xd7, 0xe4, 0x86, 0xa3, 0xc7, 0x78, 0x0a, 0x28, 0x4f, 0x9e, 0x2e, 0x07, 0xab, 0x7b, 0xa8, 0xf7,
	0x3d, 0xd4, 0xce, 0xe3, 0x20, 0xd0, 0x75, 0xaa, 0x4b, 0x75, 0xa9, 0x06, 0xc5, 0x4b, 0xa5, 0xad,
	0x8e, 0xb1, 0xa1, 0x2f, 0xa0, 0x2a, 0x97, 0xa2, 0xf3, 0x40, 0x9f, 0x5d, 0x3b, 0x75, 0x99, 0x46,
	0x84, 0x09, 0xe2, 0x4a, 0x9f, 0x33, 0x47, 0xd9, 0xfb, 0x7f, 0xd7, 0xe1, 0xe1, 0xd8, 0xc8, 0x09,
	0x7a, 0x09, 0x30, 0x88, 0xfd, 0xc0, 0xd3, 0x97, 0x13, 0x6d, 0xde, 0x55, 0xfb, 0x49, 0xcf, 0xc8,
	0x4b, 0x2f, 0x95, 0x97, 0xde, 0x4f, 0x4a, 0x5e, 0xb0, 0x85, 0x5e, 0x41, 0x23, 0x0d, 0xd3, 0x1b,
	0x28, 0x6e, 0xed, 0x8e, 0xd0, 0x97, 0x00, 0x13, 0x49, 0x22, 0xb9, 0x63, 0xc6, 0x17, 0x50, 0x1b,
	0x09, 0x27, 0x66, 0xcc, 0x67, 0xb3, 0x62, 0x54, 0x7b, 0x63, 0x3a, 0x91, 0x44, 0xc6, 0x02, 0x5b,
	0xe8, 0x6b, 0xa8, 0x4d, 0x24, 0x0f, 0x3f, 0x24, 0x91, 0x8a, 0x0b, 0xa9, 0xf7, 0x3f, 0x13, 0x7d,
	0x03, 0xf5, 0x21, 0x0d, 0xa8, 0xa4, 0x3b, 0xa6, 0xfa, 0x16, 0x8e, 0x86, 0xfc, 0x86, 0x05, 0x9c,
	0x78, 0x6b, 0x69, 0x2e, 0x44, 0x1f, 0xa5, 0xd3, 0xcc, 0x03, 0x5b, 0xe8, 0x07, 0x38, 0xc8, 0xe4,
	0x36, 0xd3, 0x9f, 0x82, 0x0e, 0xdb, 0xb7, 0x09, 0x13, 0xb6, 0xd0, 0x18, 0x9a, 0x23, 0x26, 0x24,
	0x09, 0x82, 0x4c, 0xd8, 0x4e, 0x0a, 0x98, 0x0d, 0xc1, 0xb5, 0x8f, 0xcb, 0x3e, 0xa6, 0x44, 0x44,
	0xb0, 0x85, 0x7e, 0x86, 0x47, 0x17, 0xa1, 0x47, 0x24, 0xbd, 0x1f, 0xdc, 0x14, 0x0e, 0xf5, 0x45,
	0xca, 0x68, 0x9f, 0x17, 0x68, 0xa5, 0xda, 0xfc, 0x5f, 0xd4, 0x0b, 0x78, 0x54, 0x10, 0xf3, 0x7b,
	0xc1, 0xbe, 0x82, 0xa6, 0x29, 0x56, 0x1d, 0x97, 0x79, 0x38, 0x0b, 0x47, 0xf8, 0x78, 0x9d, 0x26,
	0xf7, 0xbc, 0x62, 0x0b, 0xbd, 0x86, 0x56, 0x1a, 0x9a, 0x29, 0x77, 0x21, 0xf6, 0xb8, 0x18, 0x9b,
	0xf3, 0xc5, 0x16, 0xfa, 0x1e, 0x1a, 0x79, 0xc2, 0xf6, 0x3d, 0xb4, 0x0b, 0x0b, 0x23, 0x76, 0xc5,
	0xa3, 0x05, 0x51, 0x7b, 0xc0, 0x16, 0x1a, 0xc2, 0xd1, 0x46, 0xa3, 0x75, 0x05, 0x5b, 0x8c, 0x93,
	0xad, 0x1a, 0x72, 0xee, 0xd8, 0x42, 0xdf, 0x25, 0xdb, 0x78, 0x47, 0x24, 0x15, 0xd2, 0xe8, 0xd5,
	0x16, 0x24, 0xfb, 0x8e, 0x33, 0x4d, 0xc3, 0x16, 0x3a, 0x4f, 0x7a, 0x97, 0x7b, 0x3b, 0x3e, 0x2d,
	0x3b, 0x93, 0xb5, 0xfd, 0x36, 0x4e, 0x2b, 0xef, 0xa7, 0x9f, 0x8b, 0x4f, 0x6e, 0x05, 0x29, 0x73,
	0x39, 0xe7, 0xed, 0x26, 0x47, 0xbf, 0x0d, 0xcf, 0xee, 0x28, 0x48, 0x39, 0x94, 0x93, 0x5e, 0x43,
	0x3d, 0xff, 0x16, 0xd8, 0x65, 0x10, 0x63, 0xb3, 0xcb, 0x84, 0x1a, 0x5b, 0x97, 0xe6, 0x2f, 0xde,
	0xd9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0x81, 0x06, 0x46, 0xfa, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
	// 构建区块链网络所需要的全部文件，包括启动k8s文件
	BuildChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*empty.Empty, error)
	// 创建一条链（通道）
	BuildChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*empty.Empty, error)
	// 在k8s中运行网络
	StartChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*empty.Empty, error)
	// 查看网络是否完全运行
	IsRunning(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ChainStatus, error)
	// 停止运行
	StopChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*empty.Empty, error)
	// 是否完全停止
	IsStopped(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ChainStatus, error)
	// 删除网络全部数据文件
	DeleteChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*empty.Empty, error)
	// 下载区块链网络数据
	DownloadArtifacts(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*Artifacts, error)
	// 注册数字身份
	Register(ctx context.Context, in *RequestRegister, opts ...grpc.CallOption) (*DigitalIdentity, error)
	// 安装合约
	InstallContract(ctx context.Context, in *RequestSetupContract, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 更新合约
	UpdateContract(ctx context.Context, in *RequestSetupContract, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 查询合约，产生交易
	QueryContract(ctx context.Context, in *RequestQueryOrInvokeContract, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 调用合约，产生交易
	InvokeContract(ctx context.Context, in *RequestQueryOrInvokeContract, opts ...grpc.CallOption) (*TransactionResponse, error)
	// 查询网络pod资源
	QueryChainNodes(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseNodes, error)
	// 查询链列表
	QueryChannelList(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseChannelList, error)
	// 查询链信息
	QueryChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ChannelInformation, error)
	// 查询合约列表
	QueryContractList(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ResponseContractList, error)
	// 查询链最新块
	QueryLatestBlock(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*FullBlock, error)
	// 根据块高度查询块
	QueryBlockByNum(ctx context.Context, in *RequestQueryBlockByNum, opts ...grpc.CallOption) (*FullBlock, error)
	// 根据交易ID查询块
	QueryBlockByTxId(ctx context.Context, in *RequestQueryBlockTxId, opts ...grpc.CallOption) (*FullBlock, error)
	// 根据块Hash查询块
	QueryBlockByHash(ctx context.Context, in *RequestQueryBlockByHash, opts ...grpc.CallOption) (*FullBlock, error)
	// 根据交易ID查询交易
	QueryTxById(ctx context.Context, in *RequestQueryTxById, opts ...grpc.CallOption) (*Transaction, error)
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) BuildChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/BuildChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) BuildChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/BuildChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) StartChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/StartChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) IsRunning(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ChainStatus, error) {
	out := new(ChainStatus)
	err := c.cc.Invoke(ctx, "/protos.Network/IsRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) StopChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/StopChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) IsStopped(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ChainStatus, error) {
	out := new(ChainStatus)
	err := c.cc.Invoke(ctx, "/protos.Network/IsStopped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DeleteChain(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/protos.Network/DeleteChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DownloadArtifacts(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*Artifacts, error) {
	out := new(Artifacts)
	err := c.cc.Invoke(ctx, "/protos.Network/DownloadArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) Register(ctx context.Context, in *RequestRegister, opts ...grpc.CallOption) (*DigitalIdentity, error) {
	out := new(DigitalIdentity)
	err := c.cc.Invoke(ctx, "/protos.Network/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) InstallContract(ctx context.Context, in *RequestSetupContract, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/protos.Network/InstallContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) UpdateContract(ctx context.Context, in *RequestSetupContract, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/protos.Network/UpdateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryContract(ctx context.Context, in *RequestQueryOrInvokeContract, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) InvokeContract(ctx context.Context, in *RequestQueryOrInvokeContract, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/protos.Network/InvokeContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryChainNodes(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseNodes, error) {
	out := new(ResponseNodes)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryChainNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryChannelList(ctx context.Context, in *Chain, opts ...grpc.CallOption) (*ResponseChannelList, error) {
	out := new(ResponseChannelList)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryChannelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ChannelInformation, error) {
	out := new(ChannelInformation)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryContractList(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ResponseContractList, error) {
	out := new(ResponseContractList)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryContractList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryLatestBlock(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*FullBlock, error) {
	out := new(FullBlock)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryLatestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryBlockByNum(ctx context.Context, in *RequestQueryBlockByNum, opts ...grpc.CallOption) (*FullBlock, error) {
	out := new(FullBlock)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryBlockByTxId(ctx context.Context, in *RequestQueryBlockTxId, opts ...grpc.CallOption) (*FullBlock, error) {
	out := new(FullBlock)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryBlockByTxId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryBlockByHash(ctx context.Context, in *RequestQueryBlockByHash, opts ...grpc.CallOption) (*FullBlock, error) {
	out := new(FullBlock)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) QueryTxById(ctx context.Context, in *RequestQueryTxById, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/protos.Network/QueryTxById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
	// 构建区块链网络所需要的全部文件，包括启动k8s文件
	BuildChain(context.Context, *Chain) (*empty.Empty, error)
	// 创建一条链（通道）
	BuildChannel(context.Context, *Channel) (*empty.Empty, error)
	// 在k8s中运行网络
	StartChain(context.Context, *Chain) (*empty.Empty, error)
	// 查看网络是否完全运行
	IsRunning(context.Context, *Chain) (*ChainStatus, error)
	// 停止运行
	StopChain(context.Context, *Chain) (*empty.Empty, error)
	// 是否完全停止
	IsStopped(context.Context, *Chain) (*ChainStatus, error)
	// 删除网络全部数据文件
	DeleteChain(context.Context, *Chain) (*empty.Empty, error)
	// 下载区块链网络数据
	DownloadArtifacts(context.Context, *Chain) (*Artifacts, error)
	// 注册数字身份
	Register(context.Context, *RequestRegister) (*DigitalIdentity, error)
	// 安装合约
	InstallContract(context.Context, *RequestSetupContract) (*TransactionResponse, error)
	// 更新合约
	UpdateContract(context.Context, *RequestSetupContract) (*TransactionResponse, error)
	// 查询合约，产生交易
	QueryContract(context.Context, *RequestQueryOrInvokeContract) (*TransactionResponse, error)
	// 调用合约，产生交易
	InvokeContract(context.Context, *RequestQueryOrInvokeContract) (*TransactionResponse, error)
	// 查询网络pod资源
	QueryChainNodes(context.Context, *Chain) (*ResponseNodes, error)
	// 查询链列表
	QueryChannelList(context.Context, *Chain) (*ResponseChannelList, error)
	// 查询链信息
	QueryChannel(context.Context, *Channel) (*ChannelInformation, error)
	// 查询合约列表
	QueryContractList(context.Context, *Channel) (*ResponseContractList, error)
	// 查询链最新块
	QueryLatestBlock(context.Context, *Channel) (*FullBlock, error)
	// 根据块高度查询块
	QueryBlockByNum(context.Context, *RequestQueryBlockByNum) (*FullBlock, error)
	// 根据交易ID查询块
	QueryBlockByTxId(context.Context, *RequestQueryBlockTxId) (*FullBlock, error)
	// 根据块Hash查询块
	QueryBlockByHash(context.Context, *RequestQueryBlockByHash) (*FullBlock, error)
	// 根据交易ID查询交易
	QueryTxById(context.Context, *RequestQueryTxById) (*Transaction, error)
}

// UnimplementedNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (*UnimplementedNetworkServer) BuildChain(ctx context.Context, req *Chain) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildChain not implemented")
}
func (*UnimplementedNetworkServer) BuildChannel(ctx context.Context, req *Channel) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildChannel not implemented")
}
func (*UnimplementedNetworkServer) StartChain(ctx context.Context, req *Chain) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChain not implemented")
}
func (*UnimplementedNetworkServer) IsRunning(ctx context.Context, req *Chain) (*ChainStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRunning not implemented")
}
func (*UnimplementedNetworkServer) StopChain(ctx context.Context, req *Chain) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopChain not implemented")
}
func (*UnimplementedNetworkServer) IsStopped(ctx context.Context, req *Chain) (*ChainStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStopped not implemented")
}
func (*UnimplementedNetworkServer) DeleteChain(ctx context.Context, req *Chain) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChain not implemented")
}
func (*UnimplementedNetworkServer) DownloadArtifacts(ctx context.Context, req *Chain) (*Artifacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadArtifacts not implemented")
}
func (*UnimplementedNetworkServer) Register(ctx context.Context, req *RequestRegister) (*DigitalIdentity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedNetworkServer) InstallContract(ctx context.Context, req *RequestSetupContract) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallContract not implemented")
}
func (*UnimplementedNetworkServer) UpdateContract(ctx context.Context, req *RequestSetupContract) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (*UnimplementedNetworkServer) QueryContract(ctx context.Context, req *RequestQueryOrInvokeContract) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryContract not implemented")
}
func (*UnimplementedNetworkServer) InvokeContract(ctx context.Context, req *RequestQueryOrInvokeContract) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeContract not implemented")
}
func (*UnimplementedNetworkServer) QueryChainNodes(ctx context.Context, req *Chain) (*ResponseNodes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChainNodes not implemented")
}
func (*UnimplementedNetworkServer) QueryChannelList(ctx context.Context, req *Chain) (*ResponseChannelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChannelList not implemented")
}
func (*UnimplementedNetworkServer) QueryChannel(ctx context.Context, req *Channel) (*ChannelInformation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChannel not implemented")
}
func (*UnimplementedNetworkServer) QueryContractList(ctx context.Context, req *Channel) (*ResponseContractList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryContractList not implemented")
}
func (*UnimplementedNetworkServer) QueryLatestBlock(ctx context.Context, req *Channel) (*FullBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLatestBlock not implemented")
}
func (*UnimplementedNetworkServer) QueryBlockByNum(ctx context.Context, req *RequestQueryBlockByNum) (*FullBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockByNum not implemented")
}
func (*UnimplementedNetworkServer) QueryBlockByTxId(ctx context.Context, req *RequestQueryBlockTxId) (*FullBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockByTxId not implemented")
}
func (*UnimplementedNetworkServer) QueryBlockByHash(ctx context.Context, req *RequestQueryBlockByHash) (*FullBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockByHash not implemented")
}
func (*UnimplementedNetworkServer) QueryTxById(ctx context.Context, req *RequestQueryTxById) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTxById not implemented")
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_BuildChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).BuildChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/BuildChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).BuildChain(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_BuildChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).BuildChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/BuildChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).BuildChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_StartChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).StartChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/StartChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).StartChain(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_IsRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).IsRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/IsRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).IsRunning(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_StopChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).StopChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/StopChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).StopChain(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_IsStopped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).IsStopped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/IsStopped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).IsStopped(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DeleteChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DeleteChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/DeleteChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DeleteChain(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DownloadArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DownloadArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/DownloadArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DownloadArtifacts(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).Register(ctx, req.(*RequestRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_InstallContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetupContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).InstallContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/InstallContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).InstallContract(ctx, req.(*RequestSetupContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_UpdateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetupContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).UpdateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/UpdateContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).UpdateContract(ctx, req.(*RequestSetupContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryOrInvokeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryContract(ctx, req.(*RequestQueryOrInvokeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_InvokeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryOrInvokeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).InvokeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/InvokeContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).InvokeContract(ctx, req.(*RequestQueryOrInvokeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryChainNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryChainNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryChainNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryChainNodes(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryChannelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryChannelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryChannelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryChannelList(ctx, req.(*Chain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryContractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryContractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryContractList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryContractList(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryLatestBlock(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryBlockByNum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryBlockByNum(ctx, req.(*RequestQueryBlockByNum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryBlockByTxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryBlockTxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryBlockByTxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryBlockByTxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryBlockByTxId(ctx, req.(*RequestQueryBlockTxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryBlockByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryBlockByHash(ctx, req.(*RequestQueryBlockByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_QueryTxById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestQueryTxById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).QueryTxById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Network/QueryTxById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).QueryTxById(ctx, req.(*RequestQueryTxById))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildChain",
			Handler:    _Network_BuildChain_Handler,
		},
		{
			MethodName: "BuildChannel",
			Handler:    _Network_BuildChannel_Handler,
		},
		{
			MethodName: "StartChain",
			Handler:    _Network_StartChain_Handler,
		},
		{
			MethodName: "IsRunning",
			Handler:    _Network_IsRunning_Handler,
		},
		{
			MethodName: "StopChain",
			Handler:    _Network_StopChain_Handler,
		},
		{
			MethodName: "IsStopped",
			Handler:    _Network_IsStopped_Handler,
		},
		{
			MethodName: "DeleteChain",
			Handler:    _Network_DeleteChain_Handler,
		},
		{
			MethodName: "DownloadArtifacts",
			Handler:    _Network_DownloadArtifacts_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Network_Register_Handler,
		},
		{
			MethodName: "InstallContract",
			Handler:    _Network_InstallContract_Handler,
		},
		{
			MethodName: "UpdateContract",
			Handler:    _Network_UpdateContract_Handler,
		},
		{
			MethodName: "QueryContract",
			Handler:    _Network_QueryContract_Handler,
		},
		{
			MethodName: "InvokeContract",
			Handler:    _Network_InvokeContract_Handler,
		},
		{
			MethodName: "QueryChainNodes",
			Handler:    _Network_QueryChainNodes_Handler,
		},
		{
			MethodName: "QueryChannelList",
			Handler:    _Network_QueryChannelList_Handler,
		},
		{
			MethodName: "QueryChannel",
			Handler:    _Network_QueryChannel_Handler,
		},
		{
			MethodName: "QueryContractList",
			Handler:    _Network_QueryContractList_Handler,
		},
		{
			MethodName: "QueryLatestBlock",
			Handler:    _Network_QueryLatestBlock_Handler,
		},
		{
			MethodName: "QueryBlockByNum",
			Handler:    _Network_QueryBlockByNum_Handler,
		},
		{
			MethodName: "QueryBlockByTxId",
			Handler:    _Network_QueryBlockByTxId_Handler,
		},
		{
			MethodName: "QueryBlockByHash",
			Handler:    _Network_QueryBlockByHash_Handler,
		},
		{
			MethodName: "QueryTxById",
			Handler:    _Network_QueryTxById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
