// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/gateway/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gateway2 "github.com/isnlan/coral/pkg/blink/gateway"
)

// MockProducer is a mock of Producer interface
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// ApiUpload mocks base method
func (m *MockProducer) APIUpload(api *gateway2.API) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIUpload", api)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiUpload indicates an expected call of ApiUpload
func (mr *MockProducerMockRecorder) ApiUpload(api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIUpload", reflect.TypeOf((*MockProducer)(nil).APIUpload), api)
}

// ApiCallRecord mocks base method
func (m *MockProducer) APICallRecord(entity *gateway2.APICallEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APICallRecord", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiCallRecord indicates an expected call of ApiCallRecord
func (mr *MockProducerMockRecorder) ApiCallRecord(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APICallRecord", reflect.TypeOf((*MockProducer)(nil).APICallRecord), entity)
}

// ContractCallRecord mocks base method
func (m *MockProducer) ContractCallRecord(entity *gateway2.ContractCallEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractCallRecord", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContractCallRecord indicates an expected call of ContractCallRecord
func (mr *MockProducerMockRecorder) ContractCallRecord(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractCallRecord", reflect.TypeOf((*MockProducer)(nil).ContractCallRecord), entity)
}

// MockConsumer is a mock of Consumer interface
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// ApiHandler mocks base method
func (m *MockConsumer) APIHandler(api *gateway2.API) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIHandler", api)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiHandler indicates an expected call of ApiHandler
func (mr *MockConsumerMockRecorder) ApiHandler(api interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIHandler", reflect.TypeOf((*MockConsumer)(nil).APIHandler), api)
}

// ApiCallHandler mocks base method
func (m *MockConsumer) APICallHandler(entity *gateway2.APICallEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APICallHandler", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApiCallHandler indicates an expected call of ApiCallHandler
func (mr *MockConsumerMockRecorder) ApiCallHandler(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APICallHandler", reflect.TypeOf((*MockConsumer)(nil).APICallHandler), entity)
}

// ContractCallHandler mocks base method
func (m *MockConsumer) ContractCallHandler(entity *gateway2.ContractCallEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractCallHandler", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContractCallHandler indicates an expected call of ContractCallHandler
func (mr *MockConsumerMockRecorder) ContractCallHandler(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractCallHandler", reflect.TypeOf((*MockConsumer)(nil).ContractCallHandler), entity)
}
