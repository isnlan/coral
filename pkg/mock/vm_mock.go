// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/vm/vm.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	protos "github.com/isnlan/coral/pkg/protos"
	reflect "reflect"
)

// MockVM is a mock of VM interface
type MockVM struct {
	ctrl     *gomock.Controller
	recorder *MockVMMockRecorder
}

// MockVMMockRecorder is the mock recorder for MockVM
type MockVMMockRecorder struct {
	mock *MockVM
}

// NewMockVM creates a new mock instance
func NewMockVM(ctrl *gomock.Controller) *MockVM {
	mock := &MockVM{ctrl: ctrl}
	mock.recorder = &MockVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVM) EXPECT() *MockVMMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockVM) Apply(ctx context.Context, data [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockVMMockRecorder) Apply(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockVM)(nil).Apply), ctx, data)
}

// Delete mocks base method
func (m *MockVM) Delete(ctx context.Context, data [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockVMMockRecorder) Delete(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVM)(nil).Delete), ctx, data)
}

// GetNodeIps mocks base method
func (m *MockVM) GetNodeIps(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeIps", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeIps indicates an expected call of GetNodeIps
func (mr *MockVMMockRecorder) GetNodeIps(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeIps", reflect.TypeOf((*MockVM)(nil).GetNodeIps), ctx)
}

// GetNsList mocks base method
func (m *MockVM) GetNsList(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNsList", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNsList indicates an expected call of GetNsList
func (mr *MockVMMockRecorder) GetNsList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNsList", reflect.TypeOf((*MockVM)(nil).GetNsList), ctx)
}

// GetServiceList mocks base method
func (m *MockVM) GetServiceList(ctx context.Context, ns string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceList", ctx, ns)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceList indicates an expected call of GetServiceList
func (mr *MockVMMockRecorder) GetServiceList(ctx, ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceList", reflect.TypeOf((*MockVM)(nil).GetServiceList), ctx, ns)
}

// GetServicePort mocks base method
func (m *MockVM) GetServicePort(ctx context.Context, ns, service string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePort", ctx, ns, service)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicePort indicates an expected call of GetServicePort
func (mr *MockVMMockRecorder) GetServicePort(ctx, ns, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePort", reflect.TypeOf((*MockVM)(nil).GetServicePort), ctx, ns, service)
}

// GetDeploymentList mocks base method
func (m *MockVM) GetDeploymentList(ctx context.Context, ns string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentList", ctx, ns)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentList indicates an expected call of GetDeploymentList
func (mr *MockVMMockRecorder) GetDeploymentList(ctx, ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentList", reflect.TypeOf((*MockVM)(nil).GetDeploymentList), ctx, ns)
}

// GetDeploymentStatus mocks base method
func (m *MockVM) GetDeploymentStatus(ctx context.Context, ns, deployment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploymentStatus", ctx, ns, deployment)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDeploymentStatus indicates an expected call of GetDeploymentStatus
func (mr *MockVMMockRecorder) GetDeploymentStatus(ctx, ns, deployment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentStatus", reflect.TypeOf((*MockVM)(nil).GetDeploymentStatus), ctx, ns, deployment)
}

// GetNamespacesPods mocks base method
func (m *MockVM) GetNamespacesPods(ctx context.Context, ns, label string, filter map[string]string) ([]*protos.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespacesPods", ctx, ns, label, filter)
	ret0, _ := ret[0].([]*protos.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespacesPods indicates an expected call of GetNamespacesPods
func (mr *MockVMMockRecorder) GetNamespacesPods(ctx, ns, label, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespacesPods", reflect.TypeOf((*MockVM)(nil).GetNamespacesPods), ctx, ns, label, filter)
}

// BuildImage mocks base method
func (m *MockVM) BuildImage(ctx context.Context, name, src string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildImage", ctx, name, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildImage indicates an expected call of BuildImage
func (mr *MockVMMockRecorder) BuildImage(ctx, name, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImage", reflect.TypeOf((*MockVM)(nil).BuildImage), ctx, name, src)
}

// PushImage mocks base method
func (m *MockVM) PushImage(ctx context.Context, name, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushImage", ctx, name, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushImage indicates an expected call of PushImage
func (mr *MockVMMockRecorder) PushImage(ctx, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushImage", reflect.TypeOf((*MockVM)(nil).PushImage), ctx, name, version)
}

// GetRepositoryUrl mocks base method
func (m *MockVM) GetRepositoryUrl(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryUrl", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRepositoryUrl indicates an expected call of GetRepositoryUrl
func (mr *MockVMMockRecorder) GetRepositoryUrl(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryUrl", reflect.TypeOf((*MockVM)(nil).GetRepositoryUrl), ctx)
}
