// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/rpc/rpc.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	rpc "github.com/isnlan/coral/pkg/rpc"
	reflect "reflect"
)

// MockRpc is a mock of Rpc interface
type MockRpc struct {
	ctrl     *gomock.Controller
	recorder *MockRpcMockRecorder
}

// MockRpcMockRecorder is the mock recorder for MockRpc
type MockRpcMockRecorder struct {
	mock *MockRpc
}

// NewMockRpc creates a new mock instance
func NewMockRpc(ctrl *gomock.Controller) *MockRpc {
	mock := &MockRpc{ctrl: ctrl}
	mock.recorder = &MockRpcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRpc) EXPECT() *MockRpcMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockRpc) Register(rcvr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", rcvr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockRpcMockRecorder) Register(rcvr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRpc)(nil).Register), rcvr)
}

// RegisterName mocks base method
func (m *MockRpc) RegisterName(name string, rcvr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterName", name, rcvr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterName indicates an expected call of RegisterName
func (mr *MockRpcMockRecorder) RegisterName(name, rcvr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterName", reflect.TypeOf((*MockRpc)(nil).RegisterName), name, rcvr)
}

// Handler mocks base method
func (m *MockRpc) Handler(req *rpc.Request, baseParam ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{req}
	for _, a := range baseParam {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Handler", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handler indicates an expected call of Handler
func (mr *MockRpcMockRecorder) Handler(req interface{}, baseParam ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{req}, baseParam...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockRpc)(nil).Handler), varargs...)
}
