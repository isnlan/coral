// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/discovery/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"

	"github.com/hashicorp/consul/api"
	discovery "github.com/isnlan/coral/pkg/discovery"
	grpc "google.golang.org/grpc"
)

var _ discovery.ServiceDiscover = &MockServiceDiscover2{}

type MockServiceDiscover2 struct {
}

func (s2 *MockServiceDiscover2) HTTPServiceRegister(name, address string, port int, tags ...string) (discovery.Deregister, error) {
	return func() {}, nil
}

func (s2 *MockServiceDiscover2) RegisterHealthServer(s *grpc.Server) {
}

func (s2 *MockServiceDiscover2) ServiceRegister(name, address string, port int, tags ...string) (discovery.Deregister, error) {
	return func() {}, nil
}

func (s2 *MockServiceDiscover2) WatchService(ctx context.Context, name string, tag string, ch chan<- []*discovery.ServiceInfo) {
}

func (s2 *MockServiceDiscover2) SetKey(ns, key string, value []byte) error {
	return nil
}

func (s2 *MockServiceDiscover2) GetKey(ns, key string) ([]byte, error) {
	return []byte{}, nil
}

func (s2 *MockServiceDiscover2) DeleteKey(ns, key string) error {
	return nil
}

func (s2 *MockServiceDiscover2) DeleteKeyByPrefix(ns, prefix string) error {
	return nil
}

func (s2 *MockServiceDiscover2) WatchKey(ctx context.Context, ns, key string, ch chan<- *api.KVPair) {

}

func (s2 *MockServiceDiscover2) WatchKeysByPrefix(ctx context.Context, ns, prefix string, ch chan<- []string) {
}

func (s2 *MockServiceDiscover2) WatchValuesByKeyPrefix(ctx context.Context, ns, prefix string, ch chan<- []*api.KVPair) {
}
