// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/blink/blink.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/isnlan/coral/pkg/entity"
	reflect "reflect"
)

// MockBlink is a mock of Blink interface
type MockBlink struct {
	ctrl     *gomock.Controller
	recorder *MockBlinkMockRecorder
}

// MockBlinkMockRecorder is the mock recorder for MockBlink
type MockBlinkMockRecorder struct {
	mock *MockBlink
}

// NewMockBlink creates a new mock instance
func NewMockBlink(ctrl *gomock.Controller) *MockBlink {
	mock := &MockBlink{ctrl: ctrl}
	mock.recorder = &MockBlinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlink) EXPECT() *MockBlinkMockRecorder {
	return m.recorder
}

// AclQuery mocks base method
func (m *MockBlink) AclQuery(clientId string) (*entity.AclClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AclQuery", clientId)
	ret0, _ := ret[0].(*entity.AclClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AclQuery indicates an expected call of AclQuery
func (mr *MockBlinkMockRecorder) AclQuery(clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AclQuery", reflect.TypeOf((*MockBlink)(nil).AclQuery), clientId)
}

// ChainLease mocks base method
func (m *MockBlink) ChainLease(chainId string) (*entity.Lease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainLease", chainId)
	ret0, _ := ret[0].(*entity.Lease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainLease indicates an expected call of ChainLease
func (mr *MockBlinkMockRecorder) ChainLease(chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainLease", reflect.TypeOf((*MockBlink)(nil).ChainLease), chainId)
}
